-----------------------------------------------------------------
POBS - Version 0.99 August 10th, 2003
-----------------------------------------------------------------

ALERT: From version 0.92 on POBS provides users with the option 
to automatically replace edited PHP sourcefiles only. If you 
change one of the settings in this file you probably need to 
replace all files again. When you startup POBS, you can indicate 
whether you want to replace everything or edited files only.

You can adjust the value of the following variables in this file 
without the need to replace every file again.

$TimeOut
$FontSize
$TableColumns

When in doubt, instruct POBS to replace everything.

-----------------------------------------------------------------
About pobs-ini.inc.php file 

This file controls many aspects of POBS' behavior. POBS will try 
to include it and looks for it in the same directory as pobs.php is
located. Instead of a real ini file it's just a plain PHP script 
file. It is assumed you are familiar with PHP code syntax if you 
use POBS, so configuring this file won't give you too much trouble

POBS will not run in case source and target directory are 
identical. Make sure the source directory is read enabled and the 
target directory is write enabled. Directories are case-SENSITIVE
(Well, NOT on Win32, that is).

You can use forward slashes ( / ) for both Unix and Win32.

These directories are complete (absolute) directories and NOT 
relative to the root directory of your webserver! 

-----------------------------------------------------------------
Display Properties report

While running, POBS reports about found variables, constants and
other stuff. For your convenience and for debugging purposes you
can save and/or print this HTML report. Below, you can indicate the
number of columns of the reporttables and the fontsize. If you want
to print the report, the standard number of columns, 5, might be 
too high in order to fit on the printed page (or your screen).


-----------------------------------------------------------------
Extra obscuring

To further obscure your sourcecode you can remove the comments and
indents. If obscuring your code results in a non-working program 
you are advised to leave the indents intact and turn off 
"ConcatenateLines" for easier debugging.

I strongly advise you to turn the variables below off. You should
turn them on only after you made sure your application works fine
with functions, constants and variables already replaced. 

The concatenation of lines can create problems when used with 
inline Javascript or inline HTML with the <pre> tag used.

function JsCheckField() {
var1="x"
var2="y"
} 

In the example above, concatenation will lead to a malfunctioning
Javascript function.

function JsCheckField() {var1="x"var2="y"} 

To avoid this you can:
* Turn concatenation off
* echo Javascript like: echo "function JsCheckField() {\n";
* End javascript codelines with ";" (although I haven't tested it)


-----------------------------------------------------------------
Files to be scanned 

Do NOT use wildcards or dots here. Just plain alphanumeric 
characters


-----------------------------------------------------------------
Options

Parsing, replacing and writing your files can take quite a long 
time. In order to not get a timeout error crank it up pretty high,
depending on the speed of your processor and the total size of the
files to be processed. As an indication: for processing 250Kb of 
PHP code a timeout of 500 seconds should do fine on a 300 Mhz 
processor.

EXCLUDING USER DEFINED FILE
You probably want to exlude certain files, like useful classfile.
For this option edit $StdExcFileArray var.

Do not remove the Dummy Entry since it may result in bad breath and
other nasty things.


-----------------------------------------------------------------
Standard Variables Exclude Array

PHP provides a large number of predefined variables to any script
which it runs. Many of these variables, however, cannot be fully 
documented as they are dependent upon which server is running, the
version and setup of the server, and other factors. Some of these 
variables will not be available when PHP is run on the command-line.
It is adviced not to delete entries from the list below as it may 
result in a not working program. To keep things tidy it is adviced
to only add new entries which are clearly predefined PHP variables.

For adding your own excluded variables it is recommended to edit 
$UdExcVarArray

By the way, PHP has predefined constants too, like __LINE__ , 
__FILE__ and E_WARNING. POBS will automatically skip all these 
predefined constants and will only replace constants that are 
declared by you with the "define" command.

EXCLUDING USER DEFINED VARIABLES
You probably want to exlude certain variables. This is particularly
helpful when you make use of these variables in your Query_String.
I.e.: http://www.domain.com/phpprogram.php?uid=234&action=select. 
In this particular example you need to add at least "uid" and 
"action" to the array below in order to keep your program running 
properly.
Do NOT use the dollar sign to indicate the name of a variable here.
The names of the variables, constants and functions are case 
sensitive (which should go without saying since PHP is 
case-sensitive too.)

Do not remove the Dummy Entry since it may result in bad breath and
other nasty things.

**** WILDCARDS

Only in $UdExcVarArray you can use wildcards. You can NOT use a "?"
but only a "*" which must be placed at the end or start of a
variablename.

If you define your constants properly you probably do not need to
add constantnames to $UdExcConstArray. My advise would be to name 
them all like cERROR, cHTML or cDOMAIN. Start with a lowercase "c"
to indicate a constant and make all following characters uppercase.
This will set them apart from most textelements you use and HTML 
tagnames or HTML propertynames.

-----------------------------------------------------------------

$UdExcFuncArray

If you use javascript functions in your PHP code POBS might replace 
the name of the javascript function. It's better to prevent this 
and add the name to $UdExcFuncArray

Example:
<javascript>
function JsCheckField() 
 alert("I should add 'JsCheckField' to $UdExcFuncArray");
}
</javascript>

In future versions of POBS this adding of javascript names will 
probably not be needed anymore. But for now it is.

